{"version":3,"sources":["Marker.js","App.js","serviceWorker.js","index.js"],"names":["CustomMarker","props","state","data","fetch","this","uuid","res","json","fukai","Marker","position","Popup","role","calcFukai","React","Component","App","now","timer","setInterval","a","setState","clearInterval","markers","map","key","_id","className","Map","id","center","zoom","TileLayer","attribution","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWAsCeA,E,YAlCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAMF,EAAME,MAHG,E,iNAQCC,MAAM,2CAAD,OAA4CC,KAAKH,MAAMC,KAAKG,O,cAA7EC,E,gBACgBA,EAAIC,O,oJAGlBC,GACR,OAAGA,EAAQ,GACF,eACC,IAAMA,GAASA,GAAS,GACzB,eAEA,iB,+BAID,IACAN,EAASE,KAAKH,MAAdC,KACR,OACE,kBAACO,EAAA,EAAD,CAAQC,SAAUR,EAAKQ,UACrB,kBAACC,EAAA,EAAD,KACE,0BAAMC,KAAK,SAAUV,EAAKM,MAASJ,KAAKS,UAAUX,EAAKM,c,GA5BtCM,IAAMC,WCuClBC,G,kBApCb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXgB,IAAK,IAHU,E,sMAQjBb,KAAKc,MAAQC,YAAW,sBAAC,8BAAAC,EAAA,sEACLjB,MAAM,mCADD,cACjBG,EADiB,gBAELA,EAAIC,OAFC,OAEjBU,EAFiB,OAGvB,EAAKI,SAAS,CAAEJ,QAHO,2CAItB,K,mJAIHK,cAAclB,KAAKc,S,+BAInB,IAAMK,EAAUnB,KAAKH,MAAMgB,IAAIO,KAAI,SAAAtB,GAAI,OAAI,kBAAC,EAAD,CAAQA,KAAMA,EAAMuB,IAAKvB,EAAKwB,SAEzE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAKC,GAAG,MAAMC,OAAQ,CAAC,WAAY,aAAcC,KAAM,IACrD,kBAACC,EAAA,EAAD,CACEC,YAAY,6EACZC,IAAI,uDAEJX,Q,GA9BMT,IAAMC,YCOJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d42b90c.chunk.js","sourcesContent":["import React from 'react';\nimport { Marker, Popup } from 'react-leaflet';\n\nclass CustomMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n    };\n  }\n\n  async componentDidMount() {\n    const res = await fetch(`https://fukai.mybluemix.net/get-history/${this.state.data.uuid}`)\n    const history = await res.json();\n  }\n\n  calcFukai(fukai) {\n    if(fukai < 65) {\n      return \"ðŸ¥¶\";\n    } else if(65 <= fukai && fukai >= 70 ) {\n      return \"ðŸ¥°\";\n    } else {\n      return \"ðŸ¥µ\";\n    }\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <Marker position={data.position}>\n        <Popup>\n          <span role=\"emoji\">{ data.fukai }{ this.calcFukai(data.fukai) }</span>\n        </Popup>\n      </Marker>\n    );\n  }\n}\n\nexport default CustomMarker;\n","import React from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport Marker from './Marker';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      now: [],\n    };\n  }\n\n  async componentDidMount() {\n    this.timer = setInterval(async() => {\n      const res = await fetch('https://fukai.mybluemix.net/now');\n      const now = await res.json();\n      this.setState({ now });\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const markers = this.state.now.map(data => <Marker data={data} key={data._id} />);\n\n    return (\n      <div className=\"App\">\n        <Map id=\"map\" center={[41.8327605, 140.7515623]} zoom={13}>\n          <TileLayer\n            attribution='amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          { markers }\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}