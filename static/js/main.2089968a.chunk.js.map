{"version":3,"sources":["CustomPopup.js","CustomMarker.js","App.js","serviceWorker.js","index.js"],"names":["CustomPopup","props","state","pin","data","Promise","resolve","labels","map","datum","moment","created_at","format","datasets","label","fill","fukai","fetch","this","uuid","res","json","history","calcLine","setState","Popup","autoClose","temperature","humidity","React","Component","initMarker","ref","leafletElement","openPopup","fukaiIcon","color","L","Icon","iconUrl","window","location","host","pathname","CustomMarker","Marker","position","icon","App","now","timer","setInterval","a","clearInterval","markers","key","_id","className","href","Map","id","center","zoom","TileLayer","url","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAkDeA,E,YA5Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,IAAKF,EAAME,KAHI,E,sEAOVC,GACP,OAAO,IAAIC,SAAQ,SAAAC,GAOjBA,EAAQ,CACNC,OAPaH,EAAKI,KAAI,SAAAC,GAEtB,OADaC,IAAOD,EAAME,YACdC,OAAO,eAMnBC,SAAU,CAAC,CACTC,MAAO,2BACPC,MAAM,EACNX,KAPWA,EAAKI,KAAI,SAAAC,GAAK,OAAIA,EAAMO,kB,8KAcvBC,MAAM,2CAAD,OAA4CC,KAAKhB,MAAMC,IAAIgB,O,cAA5EC,E,gBACgBA,EAAIC,O,cAApBC,E,gBACaJ,KAAKK,SAASD,G,OAA3BlB,E,OACNc,KAAKM,SAAS,CAAEpB,S,sIAGR,IAAD,EACec,KAAKhB,MAAnBC,EADD,EACCA,IAAKC,EADN,EACMA,KACb,OACE,kBAACqB,EAAA,EAAD,CAAOC,WAAW,GAChB,oCAAWvB,EAAIgB,KAAf,mBAA6BhB,EAAIwB,YAAjC,mBAAsDxB,EAAIyB,UAC1D,kBAAC,IAAD,CAAMxB,KAAMA,S,GAvCMyB,IAAMC,WCAhC,SAASC,EAAWC,GACdA,GACJA,EAAIC,eAAeC,YAGrB,SAASC,EAAUnB,GACjB,IAAMoB,EAAQpB,EAAQ,GAAK,OACzB,IAAMA,GAASA,GAAS,GAAK,UAC7B,MACF,OAAO,IAAIqB,IAAEC,KAAK,CAChBC,QAAQ,UAAD,OAAYC,OAAOC,SAASC,MAA5B,OAAmCF,OAAOC,SAASE,SAAnD,yBAA4EP,EAA5E,UAaIQ,MATf,SAAsB3C,GAAQ,IACpBE,EAAQF,EAARE,IACR,OACE,kBAAC0C,EAAA,EAAD,CAAQb,IAAKD,EAAYe,SAAU3C,EAAI2C,SAAUC,KAAMZ,EAAUhC,EAAIa,QACnE,kBAAC,EAAD,CAAab,IAAKA,MCsBT6C,G,mBAvCb,WAAY/C,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX+C,IAAK,IAHU,E,sMAQjB/B,KAAKgC,MAAQC,YAAW,sBAAC,8BAAAC,EAAA,sEACLnC,MAAM,mCADD,cACjBG,EADiB,gBAELA,EAAIC,OAFC,OAEjB4B,EAFiB,OAGvB,EAAKzB,SAAS,CAAEyB,QAHO,2CAItB,K,mJAIHI,cAAcnC,KAAKgC,S,+BAInB,IAAMI,EAAUpC,KAAKhB,MAAM+C,IAAIzC,KAAI,SAAAL,GAAG,OAAI,kBAAC,EAAD,CAAcA,IAAKA,EAAKoD,IAAKpD,EAAIqD,SAE3E,OACE,yBAAKC,UAAU,OACb,gCACE,0HACA,uBAAGC,KAAK,UAAR,UAEF,kBAACC,EAAA,EAAD,CAAKC,GAAG,MAAMC,OAAQ,CAAC,WAAY,aAAcC,KAAM,IACrD,kBAACC,EAAA,EAAD,CACEC,IAAI,uDAEJV,Q,GAjCMzB,IAAMC,YCOJmC,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2089968a.chunk.js","sourcesContent":["import React from 'react';\nimport { Popup } from 'react-leaflet';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\n\nclass CustomPopup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pin: props.pin,\n    };\n  }\n\n  calcLine(data) {\n    return new Promise(resolve => {\n      const labels = data.map(datum => {\n        const date = moment(datum.created_at);\n        return date.format('HH:mm:ss');\n      });\n      const fukais = data.map(datum => datum.fukai);\n\n      resolve({\n        labels,\n        datasets: [{\n          label: '不快指数',\n          fill: false,\n          data: fukais,\n        }],\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const res = await fetch(`https://fukai.mybluemix.net/get-history/${this.state.pin.uuid}`)\n    const history = await res.json();\n    const data = await this.calcLine(history);\n    this.setState({ data });\n  }\n\n  render() {\n    const { pin, data } = this.state;\n    return (\n      <Popup autoClose={false}>\n        <p>UUID: { pin.uuid }, 気温: { pin.temperature }, 湿度: { pin.humidity }</p>\n        <Line data={data} />\n      </Popup>\n    );\n  }\n}\n\nexport default CustomPopup;\n","import React from 'react';\nimport { Marker } from 'react-leaflet';\nimport L from 'leaflet';\nimport CustomPopup from './CustomPopup';\n\nfunction initMarker(ref) {\n  if(!ref) return;\n  ref.leafletElement.openPopup();\n}\n\nfunction fukaiIcon(fukai) {\n  const color = fukai < 60 ? 'blue' :\n    60 <= fukai && fukai >= 70 ? 'kaiteki' :\n    'red';\n  return new L.Icon({\n    iconUrl: `http://${window.location.host}${window.location.pathname}/icons/marker-${color}.png`,\n  });\n};\n\nfunction CustomMarker(props) {\n  const { pin } = props;\n  return (\n    <Marker ref={initMarker} position={pin.position} icon={fukaiIcon(pin.fukai)}>\n      <CustomPopup pin={pin} />\n    </Marker>\n  );\n}\n\nexport default CustomMarker;\n","import React from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport CustomMarker from './CustomMarker';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      now: [],\n    };\n  }\n\n  async componentDidMount() {\n    this.timer = setInterval(async() => {\n      const res = await fetch('https://fukai.mybluemix.net/now');\n      const now = await res.json();\n      this.setState({ now });\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const markers = this.state.now.map(pin => <CustomMarker pin={pin} key={pin._id} />);\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h3>公共交通機関を快適に利用する会</h3>\n          <a href=\"#about\">About</a>\n        </header>\n        <Map id=\"map\" center={[41.8327605, 140.7515623]} zoom={13}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          { markers }\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}